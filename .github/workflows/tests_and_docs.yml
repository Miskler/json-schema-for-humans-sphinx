name: Tests and Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run tests with coverage
      run: |
        pytest --cov=jsoncrack_for_sphinx --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Generate coverage badge
      if: matrix.python-version == '3.11' && github.ref == 'refs/heads/main'
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg
        
    - name: Store coverage artifacts
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
          coverage.svg
          
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -e .
        
    - name: Run linting
      run: |
        flake8 src/ tests/
        black --check src/ tests/
        isort --check-only src/ tests/
        
    - name: Run type checking
      run: |
        mypy src/jsoncrack_for_sphinx/

  docs:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Download coverage artifacts
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports
        path: ./
        
    - name: Run tests for badge generation
      run: |
        pytest --tb=short -v --json-report --json-report-file=test_report.json > test_results.txt 2>&1 || true
        
    - name: Generate badges
      run: |
        python .github/scripts/generate_badges.py
        
    - name: Generate test status badge
      uses: RubbaBoy/BYOB@v1.3.0
      with:
        NAME: tests
        LABEL: tests
        STATUS: ${{ env.TEST_STATUS }}
        COLOR: ${{ env.TEST_COLOR }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate pass rate badge
      uses: RubbaBoy/BYOB@v1.3.0
      with:
        NAME: pass-rate
        LABEL: pass rate
        STATUS: ${{ env.PASS_RATE }}%
        COLOR: ${{ env.PASS_RATE_COLOR }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Copy coverage reports to docs
      run: |
        # Copy coverage HTML report
        cp -r htmlcov docs/_build/html/coverage
        # Copy coverage badge
        cp coverage.svg docs/_build/html/
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        force_orphan: true
