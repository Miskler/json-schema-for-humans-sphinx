name: 'Build Documentation'
description: 'Build all documentation (main + examples) for jsoncrack-for-sphinx'
outputs:
  site-path:
    description: 'Path to the built site'
    value: ${{ steps.build.outputs.site-path }}
runs:
  using: 'composite'
  steps:
    - name: Build main documentation
      shell: bash
      run: |
        cd docs
        sphinx-build -b html . _build/html
        
    - name: Build examples documentation
      shell: bash
      run: |
        cd examples/docs
        sphinx-build -b html . _build/html
        
    - name: Generate coverage badge
      shell: bash
      run: |
        pip install coverage-badge
        if [ -f "coverage.xml" ]; then
          coverage-badge -f coverage.xml -o coverage.svg
          echo "âœ“ Coverage badge generated successfully"
        else
          echo "ERROR: coverage.xml not found!"
          echo "Available files:"
          ls -la
          echo "This likely means coverage artifacts were not downloaded properly."
          exit 1
        fi
        
    - name: Run tests for badge generation
      shell: bash
      run: |
        pytest --tb=short -v --json-report --json-report-file=test_report.json > test_results.txt 2>&1 || true
        
    - name: Generate test badges
      shell: bash
      run: |
        if [ -f ".github/scripts/generate_badges.py" ]; then
          python .github/scripts/generate_badges.py
        fi
        
    - name: Prepare site structure
      id: build
      shell: bash
      run: |
        # Create main site structure
        mkdir -p _site
        cp -r docs/_build/html/* _site/
        
        # Add coverage report
        mkdir -p _site/coverage
        cp -r htmlcov/* _site/coverage/
        
        # Add examples
        mkdir -p _site/examples
        cp -r examples/docs/_build/html/* _site/examples/
        
        # Add coverage badge
        cp coverage.svg _site/
        
        # Create reports page
        if [ -f ".github/scripts/create-reports-page.sh" ]; then
          bash .github/scripts/create-reports-page.sh
        fi
        
        echo "site-path=_site" >> $GITHUB_OUTPUT
